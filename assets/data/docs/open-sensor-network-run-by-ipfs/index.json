{"hash":"0999bb0382d5234e36ef98d9b814e40db45fae1a","data":{"doc":{"id":"5edd564c2c3902919e0b1fca504f4aea","title":"Open Sensor Network Run by IPFS","headings":[{"value":"Open Sensor Network Run by IPFS"}],"subtitles":[{"depth":1,"value":"Open Sensor Network Run by IPFS","anchor":"#open-sensor-network-run-by-ipfs"},{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"1. Prepare Raspberry Pi 4","anchor":"#1-prepare-raspberry-pi-4"},{"depth":3,"value":"1.1 Get the image","anchor":"#11-get-the-image"},{"depth":3,"value":"1.2 Write the image on to a SD card","anchor":"#12-write-the-image-on-to-a-sd-card"},{"depth":3,"value":"1.3 Boot with the SD card","anchor":"#13-boot-with-the-sd-card"},{"depth":3,"value":"1.4. Remove blocking parameters","anchor":"#14-remove-blocking-parameters"},{"depth":2,"value":"2. Connect SEN0233","anchor":"#2-connect-sen0233"},{"depth":2,"value":"3. Run the Agent","anchor":"#3-run-the-agent"},{"depth":2,"value":"4. Test","anchor":"#4-test"}],"content":"# Open Sensor Network Run by IPFS\n\nRobonomics Network allows you to communicate with any sensor you wish and get data from the sensor all around the world. This data is packed in [rosbag](http://wiki.ros.org/rosbag) format, so you can easily share it using [IPFS protocol](https://ipfs.io).\n\nAt this page you'll find step-by-step instruction to connect [SEN0233](https://wiki.dfrobot.com/Air_Quality_Monitor__PM_2.5,_Formaldehyde,_Temperature_&_Humidity_Sensor__SKU__SEN0233) sensor\nto [Raspberry Pi 4](https://www.raspberrypi.org/products/raspberry-pi-4-model-b/) and make it publish data on demand.\n\n**After reading this article you should get the main idea and be able to connect any desired sensor. All of the following steps are done on Linux.**\n\n## Requirements\n\n* SEN0233\n* PM2.5 Sensor Adapter\n* Raspberry Pi 4\n* SD Card >=16Gb\n\n## 1. Prepare Raspberry Pi 4\n\n### 1.1 Get the image\n\nThe latest AIRA image can be found [here](https://aira.life/channels/aira-unstable/)\n\n```\nwget https://aira.life/channels/aira-unstable/aira-image-rpi4-20.03pre-git-aarch64-linux.img\n```\n\n### 1.2 Write the image on to a SD card \n\n```\nsudo dd if=aira-image-rpi4-20.03pre-git-aarch64-linux.img of=/dev/sda bs=4M status=progress\nsync\n```\n\n### 1.3 Boot with the SD card\n\nPlug in the SD card and connect a power supply to the board. Wait a couple of minutes.\n\nBy default OS has `root` user with empty password. There are a few ways to log in.\n\nFirst - using UART-USB cable. Connect the cable as shown below:\n\n* Black to 6th pin\n* White to 8th pin (TXD)\n* Green to 10th pin (RXD)\n\nCheck the official [documentation](https://www.raspberrypi.org/documentation/usage/gpio/) out.\n\n![Rasbperry Pi UART Connection](./images/raspberry_uart_connection.jpg \"Rasbperry Pi UART Connection\")\n\nThe connection is the same for Raspberry Pi 3 and 4.\n\nThen on your laptop run:\n\n```\nscreen /dev/ttyUSB 115200\n```\n\nAnd you should see something similar to:\n\n```\n<<< Welcome to NixOS 20.03pre-git (aarch64) - ttyS0 >>>  \n  \n  \naira-rpi4 login: root (automatic login)  \n\nStarting...  \n\n    _    ___ ____      _      \n   / \\  |_ _|  _ \\    / \\   \n  / _ \\  | || |_) |  / _ \\  \n / ___ \\ | ||  _ <  / ___ \\ \n/_/   \\_\\___|_| \\_\\/_/   \\_\\\n                        \n\nMy Ethereum address is \"38411681740ca6214b448d49549bb1dfd0a0cffa\"  \n\nLook me at https://status.robonomics.network by \"Qmdiiux3uQS8JyuPNa7Vj3iNe7UZBrpMPB2dEqUeo4YRGH\"\n```\n\n**Save somewhere your ethereum address generated by the OS. You'll need it later.**\n\nBy default `sshd` service is up and running. All you need to do is to add your SSH key:\n\n```\nmkdir .ssh/\ncurl -sSL https://github.com/<USERNAME>.keys >> .ssh/authorized_keys\n```\n\nIt's recommended to add your SSH key to Github account [help](https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account)\n\nIf you don't have a key attached to your github account then simply put the content of your `~/.ssh/id_rsa.pub` file to `/root/.ssh/authorized_keys` file on the SD card.\n\nAnother way to put the key is to unplug the SD card, plug it in a laptop and do above steps manually.\n\nAfter that you should be able to connect to the board via SSH:\n\n```\nssh root@<RASPBERRY_PI_ADDRESS>\n```\n\n### 1.4. Remove blocking parameters\n\nYou'll attach the sensor to GPIO pins which are currently are configured for UART connection. \n\nOpen `/boot/cmdline.txt` and remove everything related to `console`. In the end it must look like:\n\n```\ncma=256M loglevel=7 init=/nix/store/nlh5fcbb1cj36kn0m2pfvqs7w6dd127w-nixos-system-aira-rpi4-20.03pre197163.0c9d9518676/init\n```\n\nReboot\n\n```\nreboot\n```\n\n## 2. Connect SEN0233\n\nConnect the sensor as shown below:\n\n![Connect SEN0233](./images/connect_SEN0233.jpg \"Connect SEN0233\")\n\n\n## 3. Run the Agent\n\nThe agent must be run under `liability` user\n\n```\nsu liability\ncd\n```\n\nNow clone the repository and build the agent:\n\n```\ngit clone https://github.com/Vourhey/sen0233_sensor_agent/\ncd sen0233_sensor_agent\nnix build -f release.nix\n```\n\nRun the agent:\n\n```\nsource result/setup.bash\nroslaunch sensors_pack_agent agent.launch\n```\n\n**Don't hesitate to check [the repository](https://github.com/Vourhey/sen0233_sensor_agent/) out. You'll see how easily the sensor can be replaced with any other.**\n\n## 4. Test\n\nTo test everything works as expected go to the Dapp:\n\n```\nhttps://dapp.robonomics.network/#/sensors/airalab/QmWjvXGfVUDBNR15BBH5ERGP3SzEKbeLZWx7Fcp4kwwaw9/0x<YOUR_ETHEREUM_ADDRESS>/\n```\n\nwhere `<YOUR_ETHEREUM_ADDRESS>` is the address generated by OS on step 1.3.\n\nTo find out the address again you can run:\n\n```\nrosservice call /eth/accounts\n```\n"}},"context":{}}